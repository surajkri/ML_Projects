# -*- coding: utf-8 -*-
"""data_visualization_and_prediction_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ZPy5shLFua98HZOFYHN-mV9qL661-Y8

Data analysis on the default data sets provide by seaborn and try predicting any one of the column values using other values in the table.

The default data sets provide by seaborn are,


---



---


1. Iris

2. Tips 

3. Titanic

Importing the required libararies
"""

import seaborn as snr                 # This is used to load the default data sets 
import pandas as pd                   # it is used to present the data in an array and other formats

"""Load the default data sets using seaborn """

#importing iris data from seaborn 
iris=snr.load_dataset('iris')

iris.iloc[1:100]

"""Here we atre dropping the species column because it is string in nature which is not further used for data analysis"""

#dropping the species column (because categorical in nature)
data=iris.drop(['species'],axis=1) #axis=1 is used to drop the entire 'species' column

data.head()

data.info()

data.iloc[0:151]

"""Here we can see after 40th row a sudden increase in the sepal, petal length and sepal width."""

#line graph
ax=data.plot(figsize=(15,8),title='Iris Dataset')
ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')

"""diff() used to substract the current data from next data"""

#histogram
data['petal_length'].diff().plot(kind='hist',bins=200) #bins represent the width of each histogram block

data['sepal_width'].diff().plot(kind='hist',bins=200)

data['sepal_length'].diff().plot(kind='hist',bins=200)

data['petal_width'].diff().plot(kind='hist',bins=200)

"""Bar graph represents the each row data of all 4 columns"""

#bar graph
data.plot(kind='bar')

"""Below graph represents 4 rows of all columns in the data table"""

data.iloc[0:5].plot(kind='bar')

data.iloc[5].plot(kind='bar')

"""The pie chart represents each row of all 4 columns seperately in a percentage manner out of 100%"""

data.iloc[0:10].plot(kind='pie',figsize=(18,8),subplots=True)

"""It represents in first row the sepal_length is 50% of the addition of sepal_length, sepal_width, petal_length, petal_width."""

#pie chart 
data.iloc[0].plot.pie(figsize=(10,10),fontsize=15,autopct='%.2f') #values inside the pie upto 2 decimal points

"""Here the sepal_length, sepal_width, petal_length, petal_width are represented in sepeate 4 pie charts and in first chart the 1st row is 34.69% of all overall addition of 3 column data."""

data.iloc[0:3].plot.pie(figsize=(10,10),subplots=True, fontsize=10,autopct='%.2f')

data.iloc[0:4].plot.pie(figsize=(10,10),subplots=True, fontsize=10,autopct='%.2f')

"""In the below graph we can observe for the leaf whose sepal length is range between (0,4.8) the petal lengt is range between (0.5,2) and for the sepal_length above 4.5 the petal length lies between (0.5,7). """

#scatter plot
data.plot.scatter(x='sepal_length',y='petal_length') #'r' means red

data.plot.scatter(x='sepal_length',y='sepal_width',c='g') #'g' means green

data.plot.scatter(x='sepal_length',y='petal_length',c='sepal_width')

x=iris[['sepal_length','sepal_width','petal_length','petal_width']]
y=iris[['species']]

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier(n_neighbors=11)

knn.fit(x_train,y_train)

knn.predict(x_test)

z=knn.predict(x_test)

"""Confussion matrix and accuracy used to compare the predicted values and the real values and result the accuracy."""

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,z) 
ac=accuracy_score(y_test,z)

print(ac)

print(cm)

iris.info()

"""index=[1] used to form the data in a manner so we can predict for new values."""

new_data={'sepal_length':5.7,'sepal_width':2.8,'petal_length':4.1,'petal_width':1.3}
index=[1]

new_data1=pd.DataFrame(new_data,index)

knn.predict(new_data1)

"""Data analysis on tip data and prediction of tips using LR

---



---


"""

tips=snr.load_dataset('tips')

tips.head()

"""In scatter plot hardly we can represent and understand 3 data but in relational plot we can compare, present and understand more than 3 data.

By the below relational plot we can understand the hhighest tip is given by the smokers.
"""

#relational plot
snr.relplot(x='total_bill',y='tip',data=tips,hue='smoker')

"""By below relational plot we can understand the highest tip is given by smokers and max people visit the resto at Dinner time."""

snr.relplot(x='total_bill',y='tip',data=tips,hue='smoker',style='time')

"""Here we represented 5 datas simultaneously"""

snr.relplot(x='total_bill',y='tip',data=tips,hue='smoker',style='time',col='sex')

snr.relplot(x='total_bill',y='tip',data=tips,hue='smoker',col='time')

"""Here I represented 6 data simultaneously"""

snr.relplot(x='total_bill',y='tip',data=tips,hue='smoker',style='time',col='sex',size='size')

#catplot
snr.catplot(x='total_bill',y='day',data=tips)

#boxplot
snr.catplot(x='day',y='tip',hue='sex',kind='box',data=tips)

tips.head()

tips.info()

tips1=tips.drop(['day'],axis=1)

tips1.info()

tips1=tips1.fillna(method='ffill')

tips1['sex']=tips1['sex'].apply({'Male':1,'Female':2}.get)
tips1['smoker']=tips1['smoker'].apply({'Yes':1,'No':2}.get)
tips1['time']=tips1['time'].apply({'Dinner':1,'Lunch':2}.get)

tips1.head()

tips1.isnull().sum()

x=tips1[['total_bill','sex','smoker','time','size']]
y=tips1[['tip']]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

x_train.shape

y_train.shape

x_test.shape

y_test.shape

from sklearn.linear_model import LinearRegression
regression=LinearRegression()

regression.fit(x_train,y_train)

regression.score(x,y)

new_data={'total_bill':16.99,'sex':2,'smoker':2,'time':1,'size':2}
index=[1]

new_data1=pd.DataFrame(new_data,index)

new_data1

regression.predict(new_data1)

"""Give some analysis and use ML algo on Titanic data set

---



---


"""

titanic= snr.load_dataset("titanic")

titanic.head()

"""relation between pclass and fare"""

titanic.plot.scatter(x='pclass',y='fare',c='g') #'g' means green

titanic['fare'].iloc[0:4].plot.pie(figsize=(10,10),subplots=True, fontsize=10,autopct='%.2f')

snr.relplot(x='class',y='fare',data=titanic,hue='alive',style='alone',col='who')

titanic['sex'].fillna("Unknown",inplace=True)
titanic['who'].fillna("Unknown",inplace=True)
titanic['adult_male'].fillna(method='ffill',inplace=True)
titanic['alive'].fillna("Unknown",inplace=True)
titanic['alone'].fillna("Unknown",inplace=True)
titanic['age'].fillna('Unknown',inplace=True)

titanic.drop(['parch'],axis=1,inplace=True)
titanic.drop(['embarked'],axis=1,inplace=True)
titanic.drop(["deck"],axis=1,inplace=True)

titanic.head()

titanic['sex']=titanic['sex'].apply({'male':5,'female':10,'Unknown':0}.get)
titanic['class']=titanic['class'].apply({'Third':1,'Second':5,'First':10,'Unknown':0}.get)
titanic['adult_male']=titanic['adult_male'].apply({'True':1,'False':0,'Unknown':0}.get)
titanic['alive']=titanic['alive'].apply({'yes':10,'no':5,'Unknown':0}.get)
titanic['alone']=titanic['alone'].apply({'True':1,'False':0,'Unknown':0}.get)
# titanic['age']=titanic['age'].apply({'Unknown':0}.get)

titanic.iloc[0:10]

"""This shows in sample of first 100 peoples around 40 of them are men and 60 of them are women."""

titanic['sex'].iloc[0:100].plot(kind='bar')

"""The long line represent the females and short line represents the male"""

titanic['sex'].plot(kind='bar')